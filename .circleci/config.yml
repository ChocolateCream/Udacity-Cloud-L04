version: 2.1

jobs:

    create_infrastructure:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                  name: Creating Cloudformation Stack
                  command: |
                    aws cloudformation deploy \
                    --template-file CloudFormationTemplate.yml \
                    --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
                    --tags randy=cola
            - run:
                name: Getting tar utitlity
                command: yum install -y tar gzip
            - run:
                name: Adding the ips to the inventory file
                command: |
                    aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:randy,Values=cola" \
                    --output text >> ./.circleci/newfolder/invfile.txt
            - run:
                name: print the invfile.txt
                command: cat ./.circleci/newfolder/invfile.txt
            - run:
                name: print the invfile.txt
                command: cat ./.circleci/newfolder/invfile.txt
            - persist_to_workspace:
                root: .
                paths: [.circleci/newfolder/invfile.txt]

    get_ips:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                name: Getting tar utitlity
                command: yum install -y tar gzip
            - run:
                name: Adding the ips to the inventory file
                command: |
                    aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:randy,Values=cola" \
                    --output text >> ./.circleci/newfolder/invfile.txt
            - run:
                name: print the invfile.txt
                command: cat ./.circleci/newfolder/invfile.txt
            - persist_to_workspace:
                root: ~/
                paths: [project/.circleci/newfolder/invfile.txt]

    # check-img:
    #     docker:
    #         - image: circleci/node:13.8.0
    #     steps:
    #         - checkout
    #         - run:
    #             name: getting aws-cli
    #             command: |
    #                 curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    #                 unzip awscliv2.zip
    #                 sudo ./aws/install
    #                 export AWS_PAGER=""
    #                 # sudo apt install less
    #                 # aws iam list-users --no-paginate
    #                 aws iam list-users


    check-img:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run:
                name: getting versions
                command: cat /etc/os-release
            - run:
                name: Getting Ansible
                command: |
                    sudo apt update
                    sudo apt install ansible
                    # sudo pip3 install ansible
            - run: node --version




    # joba:
    #     docker:
    #         - image: circleci/node:13.8.0
    #     steps:
    #         - checkout
    #         - add_ssh_keys:
    #             fingerprints: ["a6:cc:1b:82:99:06:8d:cf:79:e8:c6:c4:0b:6b:2b:a7"]
    #         - run:
    #             name: Getting Ansible
    #             command: |
    #                 sudo apt update
    #                 sudo apt install ansible
    #                 sudo apt-get install aptitude

    #         - run:
    #             name: Getting the AWS CLI
    #             command: |
    #                 curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
    #                 -o "awscliv2.zip"
    #                 unzip awscliv2.zip
    #                 sudo ./aws/install
    #                 export AWS_PAGER=""
    #         - run:
    #             name: Getting the DNS name of the server
    #             command: |
    #                 # aws ec2 describe-instances \
    #                 # --query 'Reservations[*].Instances[*].PublicDnsName' \
    #                 # --filters "Name=tag:Project,Values=udacity" \
    #                 # --output text >> ansible_folder/inventory
    #                 aws ec2 describe-instances \
    #                 --query 'Reservations[*].Instances[*].PublicDnsName' \
    #                 --filters "Name=tag:Project,Values=udacity" \
    #                 --output text >> ansible_folder/inventory


    joba:
        docker:
            - image: ubuntu
        steps:
            - checkout
            - add_ssh_keys:
                fingerprints: ["a6:cc:1b:82:99:06:8d:cf:79:e8:c6:c4:0b:6b:2b:a7"]
            - run:
                name: Getting Ansible
                command: |
                    apt update -y
                    apt install ansible -y
            - run:
                name: Getting curl and unzip
                command: |
                    apt install -y curl
                    apt install -y unzip
            - run:
                name: Getting the AWS CLI
                command: |
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
                    -o "awscliv2.zip"
                    unzip awscliv2.zip
                    ./aws/install
                    # export AWS_PAGER=""
            - run:
                name: Getting the DNS name of the server
                command: |
                    # aws ec2 describe-instances \
                    # --query 'Reservations[*].Instances[*].PublicDnsName' \
                    # --filters "Name=tag:Project,Values=udacity" \
                    # --output text >> ansible_folder/inventory
                    aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicDnsName' \
                    --filters "Name=tag:Project,Values=udacity" \
                    --output text >> ansible_folder/inventory
            - run:
                name: Print the DNS names
                command: cat ansible_folder/inventory
            - run:
                name: Use Ansible
                command: |
                    tar -C randomfolder -czvf artifact.tar.gz .
                    cd ansible_folder
                    echo "Contents  of the inventory file is -------"
                    cat inventory
                    ansible-playbook -i inventory playbook.yml


    jobb:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                # You can get this ID in the section where you registered the SSH Key
                fingerprints: ["a6:cc:1b:82:99:06:8d:cf:79:e8:c6:c4:0b:6b:2b:a7"]
            - run:
                name: Getting Ansible
                command: apk add --update ansible
            - run:
                name: Getting curl and unzip
                command: |
                    apk add curl
                    apk add unzip
            - run:
                name: Getting the AWS CLI
                command: |
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
                    -o "awscliv2.zip"
                    unzip awscliv2.zip
                    ./aws/install
                    aws --version
                    /usr/local/bin/aws --version
                    # export AWS_PAGER=""
            - run:
                name: Getting the DNS name of the server
                command: |
                    # aws ec2 describe-instances \
                    # --query 'Reservations[*].Instances[*].PublicDnsName' \
                    # --filters "Name=tag:Project,Values=udacity" \
                    # --output text >> ansible_folder/inventory
                    aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicDnsName' \
                    --filters "Name=tag:Project,Values=udacity" \
                    --output text >> ansible_folder/inventory
            - run:
                name: Print the DNS names
                command: cat ansible_folder/inventory
            - run:
                name: Use Ansible
                command: |
                    tar -C randomfolder -czvf artifact.tar.gz .
                    cd ansible_folder
                    echo "Contents  of the inventory file is -------"
                    cat inventory
                    ansible-playbook -i inventory playbook.yml



    fake-smoke-test:
        docker:
            - image: amazon/aws-cli
        steps:
            - run:
                name: Get backend url
                command: |
                    if curl "http://3.84.249.225:3030/api/status" | grep "ok"
                    then
                        echo "success"
                    else
                        echo "failure"
                    fi

    configure_infrastructure:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                # You can get this ID in the section where you registered the SSH Key
                fingerprints: ["a6:cc:1b:82:99:06:8d:cf:79:e8:c6:c4:0b:6b:2b:a7"]
            - run:
                name: Getting Ansible
                command: apk add --update ansible
            - attach_workspace:
                at: ~/
            # - run:
            #     name: Running Playbook and Configuring server
            #     command: ansible-playbook -i ./inv_dir/inventory playbook.yml
            - run:
                name: print the contents of the file
                command: |
                    cat ./.circleci/newfolder/invfile.txt
                    pwd
                    ls ./searchmebecauseiamhere

    smoke_test:
        docker:
            - image: amazon/aws-cli
        steps:
            # - run: apk add --update curl
            - run:
                name: Smoke Test
                # command: |
                #     URL="https://blog.udacity.com/"
                #     # Test if website exists
                #     if curl -s --head ${URL} 
                #     then
                #         return 0
                #     else
                #         return 1
                #     fi
                command: return 1
            - destroy_environment

    # Executes the bucket.yml - Deploy an S3 bucket, and interface with that bucket
    # to synchronize the files between local and the bucket.
    # Note that the `--parameter-overrides` let you specify a value that
    # override parameter value in the bucket.yml template file.
    create_and_deploy_front_end:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                name: Execute bucket.yml - Create Cloudformation Stack
                command: |
                    aws cloudformation deploy \
                    --template-file bucket.yml \
                    --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
                    --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
            # Uncomment the step below if you wish to upload all
            # contents of the current directory to the S3 bucket
            # - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete


workflows:
    AWSworkflow:
        jobs:
            # - create_infrastructure
            # - configure_infrastructure:
            #     requires: [create_infrastructure]
            # - smoke_test:
            #     requires: [create_infrastructure]
            # - create_infrastructure
            
            # - get_ips
            # - configure_infrastructure:
            #     requires: [get_ips]
            # - check-img
            - fake-smoke-test
            # - jobb:
            #     requires:
            #       - joba
